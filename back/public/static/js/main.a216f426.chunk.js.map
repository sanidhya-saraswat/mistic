{"version":3,"sources":["components/Header/Header.js","components/Body/AddNew/Recents/Recents.js","components/Body/AddNew/AddNewMist/AddNewMist.js","components/Body/AddNew/AddNew.js","components/Body/Manage/Manage.js","components/Body/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Recents","AddNewMist","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","firstExp","onClick","secondExp","state","currentScreen","middlePart","e","setState","AddNew","AddNew_Recents_Recents","AddNew_AddNewMist_AddNewMist","Manage","Body","Switch_default","Route","exact","path","component","App","components_Header_Header","components_Body_Body","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4XAaeA,gMARX,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gBAJqBC,8BCUNC,gMARX,OACJL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,8BAJoBE,sBC8BPE,qBA7Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAKU,SAAWlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOgB,QAASX,EAAKO,aAClDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,+BAGJM,EAAKY,UAAYpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAGhCK,EAAKa,MAAQ,CACXC,cAAe,QACfC,WAAYf,EAAKU,UAjBFV,2EAoBPgB,GACuB,UAA7Bb,KAAKU,MAAMC,cAA2BX,KAAKc,SAAS,CAAEH,cAAe,SAAUC,WAAYZ,KAAKS,YAC/FT,KAAKc,SAAS,CAAEH,cAAe,QAASC,WAAYZ,KAAKO,4CAG9D,OAAQlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBQ,KAAKU,MAAME,mBA1B/BnB,cCYVsB,mLATX,OACD1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAClBH,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,cALqBxB,aCONyB,0LANX,OACD7B,EAAAC,EAAAC,cAAA,4BAHkBE,+BCgBN0B,mLAXT,OACE9B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,KACED,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC1B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWN,aANtBzB,aCSNgC,mLATX,OACEpC,EAAAC,EAAAC,cAAA,WACDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAACmC,EAAD,OACxBrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAACoC,EAAD,eALTlC,aCQEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KAAe9C,EAAAC,EAAAC,cAAC6C,EAAD,OAAyBC,SAASC,eAAe,SD0H1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a216f426.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n     <div className=\"my-header\">\n<div className=\"title\">MIST</div>\n     </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Recents.css';\n\nclass Recents extends Component {\n  render() {\n    return (\n<div className=\"base-left-div\">\n  <div>Recents</div>\n</div>\n    );\n  }\n}\n\nexport default Recents;\n","import React, { Component } from 'react';\nimport './AddNewMist.css';\n\nclass AddNewMist extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.firstExp = <div className=\"div1\" onClick={this.handleClick}>\n      <div className=\"bg\"></div>\n      <div className=\"bg bg2\"></div>\n      <div className=\"bg bg3\"></div>\n      <div className=\"center-div\">\n        <div>+</div>\n        <div>Add a new mist</div>\n      </div>\n    </div>;\n    this.secondExp = <div className=\"div2\">\n\n    </div>\n    this.state = {\n      currentScreen: 'first',\n      middlePart: this.firstExp\n    }\n  }\n  handleClick(e) {\n    if (this.state.currentScreen === 'first') this.setState({ currentScreen: 'second', middlePart: this.secondExp })\n    else this.setState({ currentScreen: 'first', middlePart: this.firstExp });\n  }\n  render() {\n    return (<div className=\"base-right-div\">{this.state.middlePart}</div>);\n  }\n}\n\nexport default AddNewMist;\n","import React, { Component } from 'react';\nimport './AddNew.css';\nimport Recents from './Recents/Recents';\nimport AddNewMist from './AddNewMist/AddNewMist';\nclass AddNew extends Component {\n  render() {\n    return (\n   <div className=\"base-add-new-div\">\n<Recents/>\n<AddNewMist/>\n   </div>\n    );\n  }\n}\n\nexport default AddNew;\n","import React, { Component } from 'react';\nimport './Manage.css';\n\nclass Manage extends Component {\n  render() {\n    return (\n   <div>Manage</div>\n    );\n  }\n}\n\nexport default Manage;\n","import React, { Component } from 'react';\nimport './Body.css';\nimport { Route } from 'react-router-dom';\nimport AddNew from './AddNew/AddNew';\n  import Manage from './Manage/Manage';\n  import Switch from 'react-router-dom/Switch';\n  class Body extends Component {\n    render() {\n      return (\n        <div>\n        <Switch>\n          <Route exact path=\"/\" component={AddNew} />\n          <Route path=\"/manage\" component={Manage} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default Body;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header.js';\nimport Body from './components/Body/Body.js';\nclass App extends Component {\n  render() {\n    return (\n      <div>\n     <div className=\"header\"><Header/></div>\n     <div className=\"body\"><Body/></div>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}